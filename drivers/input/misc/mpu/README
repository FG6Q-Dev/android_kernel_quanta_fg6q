Kernel driver inv_dev
Author: Invensense <http://invensense.com>

--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
This document describes how to install the Invensense device driver into a
Linux kernel. 
At the moment, this driver supports the ITG3500/MPU6050/MPU9150/MPU3050. 
The slave address of these four chips are 0x68. However, the actual slave 
address depends on the board configuration. The driver does not assume anything 
about it.

Files included in this package:
    inv_gyro.c
    inv_gyro.h
    inv_gyro_misc.c
    inv_mpu3050.c
    inv_slave_bma250.c
    dmpKey.h
    dmpmap.h
    dmpDefaultMPU6050.c
    mpu.h

--------------------------------------------------------------------------------
Including the driver in the Linux kernel
--------------------------------------------------------------------------------
The files listed should be added to the drivers/input/misc directory (or another
directory of your choosing). When building the kernel, the driver will not 
appear in menuconfig without modifications similar to those below:

drivers/input/misc/Kconfig
config INPUT_INV_DEV
        tristate "invensense device support ITG3500/MPU6050/MPU9150/MPU3050"
    depends on I2C && SYSFS && INPUT && INPUT_EVDEV
    help
          This driver implements the invensense itg3500/mpu6050/mpu9150/mpu3050 
          device driver. It sends gyro/accelerometer/compass data out when 
          opened. To compile this driver as a module, choose M here: the module 
          will be called inv_dev.

drivers/input/misc/Makefile
obj-$(CONFIG_INPUT_INV_DEV) += inv_dev.o
inv_dev-objs                := inv_gyro.o 
inv_dev-objs                += inv_gyro_misc.o 
inv_dev-objs                += inv_mpu3050.o 
inv_dev-objs                += inv_slave_bma250.o 
inv_dev-objs                += dmpDefaultMPU6050.o

the include file "core/driver/include/linux/mpu.h" should be copied to 
"kernel/include/linux/".

--------------------------------------------------------------------------------
Board file and Platform Data
--------------------------------------------------------------------------------
The board file needs to be modified to register the device on an I2C bus. An
i2c_board_info instance must be defined as seen below. The hardcoded value of
140 corresponds to the GPIO input pin wired to the device's interrupt pin.
This pin will most likely be different for your platform. It is also important 
to reserve this pin as an input pin. Different platform has different method to 
do that.
Platform data is for the orientation matrix, and secondary bus, secondary 
orientation matrix situations.
For MPU9150, it regarded as a MPU9150 and AKM8975 in the secondary.
So the secondary i2c address must be filled. 
The key value is an authentication key defined by Invensense. 
It is defined for each customer differently.
Replace it with your own key.

The board file is arch/arm/mach-omap2/board-omap4panda.c or modify the board 
file in your system as below.

-------------
Platform data
-------------

For ak8963 in the secondary i2c bus:

static struct mpu_platform_data mpu_data = {
	.int_config  = 0x00,
	.level_shifter = 0,
	.orientation = {  -1,  0,  0,
			   0,  1,  0,
			   0,  0, -1 },
	.sec_slave_type = SECONDARY_SLAVE_TYPE_COMPASS,
	.sec_slave_id   = COMPASS_ID_AK8963,
	.secondary_i2c_addr = 0x0E,
	.secondary_orientation = { 0,  0,  1,
				   0,  1,  0,
				   -1,  0,  0 },
	.key = {INSERT YOUR KEY HERE}
};

For mpu9150, the secondary i2c bus address must be filled. It can't be left 
open:

static struct mpu_platform_data mpu_data = {
	.int_config  = 0x00,
	.level_shifter = 0,
	.orientation = {  -1,  0,  0,
			   0,  1,  0,
			   0,  0, -1 },
	.sec_slave_type = SECONDARY_SLAVE_TYPE_COMPASS,
	.sec_slave_id   = COMPASS_ID_AK8975,
	.secondary_i2c_addr = 0x0E,
	.secondary_orientation = {  -1,  0, 0,
				   0,  1,  0,
				   0,  0, -1 },
	.key = {INSERT YOUR KEY HERE}
};

For bma250 in the secondary, please use the platform data as:

static struct mpu_platform_data mpu_data = {
	.int_config  = 0x00,
	.level_shifter = 0,
	.orientation = {  -1,  0,  0,
			   0,  1,  0,
			   0,  0, -1 },
	.sec_slave_type = SECONDARY_SLAVE_TYPE_ACCEL,
	.sec_slave_id   = ACCEL_ID_BMA250,
	.secondary_i2c_addr = 0x18,
	.secondary_orientation = { 0,  1,  0,
				   0,  0,  -1,
				   1,  0,  0 },
	.key = {INSERT YOUR KEY HERE}
};

-----------------
The i2c init data
-----------------

For mpu3050 and yas530 in the same i2c primary bus:

static struct i2c_board_info __initdata chip_board_info[] = {
	{
		I2C_BOARD_INFO("mpu3050", 0x68),
		.irq = (IH_GPIO_BASE + MPUIRQ_GPIO),
		.platform_data = &mpu_data,
	},
	{
		I2C_BOARD_INFO("yas530", 0x2E),
		.platform_data = &compass_data,
	},
};

For itg3500:

static struct i2c_board_info __initdata chip_board_info[] = {
	{
		I2C_BOARD_INFO("itg3500", 0x68),
		.irq = (IH_GPIO_BASE + MPUIRQ_GPIO),
                .platform_data = &gyro_platform_data,
	},
};

For mpu6050:

static struct i2c_board_info __initdata chip_board_info[] = {
	{
		I2C_BOARD_INFO("mpu6050", 0x68),
		.irq = (IH_GPIO_BASE + MPUIRQ_GPIO),
		.platform_data = &gyro_platform_data,
	},
};

For mpu9150:

static struct i2c_board_info __initdata chip_board_info[] = {
	{
		I2C_BOARD_INFO("mpu9150", 0x68),
		.irq = (IH_GPIO_BASE + MPUIRQ_GPIO),
		.platform_data = &gyro_platform_data,
	},
};

In the _i2c_init function, the device is registered in 
static int __init omap4_panda_i2c_init(void) of 
arch/arm/mach-omap2/board-omap4panda.c in the following manner:
    
omap_register_i2c_bus(4, 400, chip_board_info, ARRAY_SIZE(chip_board_info));


--------------------------------------------------------------------------------
Input subsystem
--------------------------------------------------------------------------------
Input subsystem is used in Linux for those devices that handles input-only 
functions. It provides a event file located in /dev/input/ directory. 
To identify which input corresponding to which event, read or cat the 
"/proc/bus/input/devices" file. 
You will see a list of all the input devices installed in the system and their 
name. For this driver, there could be as much 3 input. 
Their names are: 
	"MPU3500"
	"MPU6050"
	"MPU9150"
	"MPU3050" 
    
This is the main event that outputs gyro/accelerometer data.
	"INV_DMP"

This is the event that output flick or tap or orientation data. It only exists 
for MPU6050 and MPU9150:
	"INV_COMPASS"
As its name suggests, it output compass data and only exists for MPU9150 or 
MPU6050 with secondary compass.
In the following description, "eventX" means event0, or event1 or a 
corresponding event file.

--------------------------------------------------------------------------------
Communicating with the driver in userspace
--------------------------------------------------------------------------------
Upon installation, the driver generates several files in sysfs. If your 
platform is configured as detailed above, navigate to the following path to 
find these files:
/sys/class/invensense/mpu

--------------------------------------------------------------------------------
The list below provides a brief description for each file.
--------------------------------------------------------------------------------
For ITG3500:

raw_gyro (Read-only)
Read gyro data directly from the gyro registers.

temperature (Read-only)
Read temperature data directly from the temperature register.

fifo_rate (Read/write)
Configure the ADC sampling rate and FIFO output rate.

enable (Read/write)
master enable, enable this would output data through input event handler.

FSR (Read/write)
Configure the gyro full-scale range.

clock_source (Read-only)
Check which clock-source is used by the chip.

power_state (Read/write)
turn on/off the power supply

gyro_scale (Read-only)
Get the gyro scale factor (LSBs/dps).

temp_scale (Read-only)
Get the temperature scale factor (LSBs/degrees C).

temp_offset (Read-only)
Get the temperature offset (LSBs).

reg_dump (Read-only)
dump register value(debug only)

gyro_matrix (Read-only)
get orientation matrix of mpu

self_test (read-only)
read this entry trigger self test. The return value is
"A, B, C, D"
where, A, B, C, are gyro bias values in q16 format: 1 dps = 2^16. 
D is the status indicating success/fail. For different chip, the 
result is different for success/fail. 1 means success 0 means fail. 
The LSB of D is for gyro; the bit next to LSB of D is for accel. 
Bit 2 of D is reserved for compass result.

key (read-only)
show the key value of this driver. Used by MPL.

early_suspend_enable (Read/Write)
enable early_suspend/late_resume capability. Default is on.

--------------------------------------------------------------------------------
For MPU6050:
MPU6050 has all the sysfs files that ITG3500 has. It has additional files list 
below:

gyro_fifo_enable (read/write)
enable/disable gyro data output in event handler. This entry has some logical 
relationship with gyro_enable. 
If gyro_enable is 0, this entry will be set as zero automatically.

gyro_enable (read/write)
enable/disable gyro functionality. affect raw_gyro. turn off this will shut 
down gyro and save power.

accl_fifo_enable (read/write)
enable/disable accelerometer data output in event handler.This entry has some 
logical relationship with accl_enable. If accl_enable is 0, this entry will be 
set as zero automatically.
Turning off this entry does not mean accel is turned off. It is just not 
outputting data.

accl_enable (read/write)
enable/disable accelerometer functionality. affect raw_accl. turn off this will
shut down accel and save power.

accl_fs (read/write)
accelerometer full scale range. This range is from 2g to 16g.

accl_bias(read-only)
show the accel bias data for X, Y, Z.

accel_matrix (Read-only)
show the accel matrix

raw_accl (read only)
read accelerometer data

tap_on (read/write)
enable the tap/orientation function in DMP firmware

firmware_loaded (read/write)
Flag indicate the whether firmware is loaded or not in the DMP engine. 0 means
no firmware loaded.
1 means firmware is already loaded and running. 
This flag can only be written as 0. 1 is updated internally.

dmp_firmware (write only binary file)
This is the entry that firmware code is loaded into. If the action is 
successful, firmware_loaded will be updated as 1. In order to load new firmware,
firmware_loaded flag should be set 0.

lpa_mode(read-write)
Low power  accelerometer mode
lpa_freq(read-write)
low power acceleromter frequency.

flick_lower
flick_upper
flick_counter
flick_message_on
flick_int_on
flick_axis
Flick related entries.

pedometer_time
pedometer_steps
Pedometer related entry

--------------------------------------------------------------------------------
For MPU9150 and secondary compass

MPU9150 has every entry MPU6050 has. In addition it has:

compass_enable (read/write)
enable this will create a new event handler under /dev/input for the compass 
data output.

compass_scale (read/write)
This will show or set the compass scale.

compass_matrix (Read-only)
show compass mounting matrix.

--------------------------------------------------------------------------------
For MPU3050

bma250_bandwidth: 
If using bma250 as secondary, this is the bandwidth setting for BMA250.

--------------------------------------------------------------------------------
Determine which event to use
--------------------------------------------------------------------------------
A "cat" command to /proc/bus/input/devices shows the following:

I: Bus=0018 Vendor=4953 Product=0053 Version=0001
N: Name="MPU6050"
P: Phys=
S: Sysfs=/devices/platform/omap/omap_i2c.4/i2c-4/4-0068/input/input9
U: Uniq=
H: Handlers=event0 
B: PROP=0
B: EV=5
B: REL=33f

I: Bus=0018 Vendor=4953 Product=0053 Version=0001
N: Name="INV_DMP"
P: Phys=
S: Sysfs=/devices/platform/omap/omap_i2c.4/i2c-4/4-0068/input/input10
U: Uniq=
H: Handlers=event1 
B: PROP=0
B: EV=5
B: REL=33f

I: Bus=0018 Vendor=4953 Product=0053 Version=0001
N: Name="INV_COMPASS"
P: Phys=
S: Sysfs=/devices/platform/omap/omap_i2c.4/i2c-4/4-0068/input/input11
U: Uniq=
H: Handlers=event2 
B: PROP=0
B: EV=5
B: REL=33f

There could be more events in one system. It is easy to parse this output to get
the event number you want. A helper function is also available to do that.

--------------------------------------------------------------------------------
Using /dev/input/eventX
--------------------------------------------------------------------------------
eventX
located in /dev/input/
These are read-only files. They outputs gyro/accel/compass data using input data
structure.

If streaming to a userspace application, the recommended way to access data is
via /dev/input/eventX. Follow these steps to get constant readings from the 
driver:

1. Write a 1 to power_state to turn on the chip. This is the default setting
   after installing the driver.
2. Write the desired output rate to fifo_rate.
3. write 1 to enable to turn on the event.
4. Read /dev/input/eventX to get a string of gyro/accel data.
5. Parse this string to obtain each gyro/accel element.
6. If dmp firmware code is loaded, read /dev/input/eventX associated with "DMP".
7. If compass is enabled, read /dev/input/eventX associated with "COMPASS"

================================================================================
                    Recommended sysfs entry setup senquence
================================================================================
1. Without DMP firmware
1.1 set "power_state" to 1,
1.2 change FSR value to your need.
1.3 change gyro_fifo_enable and accle_fifo_enable and compass_enable to your 
    needs. For example, if you want gyro only, set accl_fifo_enable to 0 or set 
    accl_enable to zero and compass_enable to zero. If you want accel only, 
    set gyro_fifo_enable to 0 or set gyro_enable to zero and compass_enable to 
    zero. If you want compass only, disable gyro and accel.
1.4 set "enable" to 1. you will get output you want.

2. With DMP firmware
2.1 set "power_state" to 1,
2.2 write "0" to firmware_loaded if it is not zero already.
2.3 load firmware into "dmp_firmware" as a whole. Don't split the DMP firmware
    image. 
2.4 make sure firmware_loaded is 1 after loading.
2.5 make other configurations similar to the situation as the situation that is
    without DMP firmware.
2.6 set "enable" to 1.






